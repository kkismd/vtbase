;; PPU I/O registers
PPU_CTRL1       :=$2000
PPU_CTRL2       :=$2001
PPU_STATUS      :=$2002
PPU_SPR_ADDR    :=$2003
PPU_SPR_IO      :=$2004
PPU_VRAM_ADDR1  :=$2005
PPU_VRAM_ADDR2  :=$2006
PPU_VRAM_IO     :=$2007

BG_PALETTE_TBL  :=$3f00
SPR_PALETTE_TBL :=$3f10

SCREEN_WIDTH    :=32
SCREEN_HEIGHT   :=29

VRAM_NAME_TBL   :=$2000
VRAM_ATTR_TBL   :=$23c0

APU_DMC_IRQ     :=$4010
APU_STATUS      :=$4015
APU_FRAME_CNT   :=$4017

                                ;; https://github.com/bbbradsmith/NES-ca65-example
                                ;; example.s
                                ;; Brad Smith (rainwarrior), 4/06/2014
                                ;; http://rainwarrior.ca

                                ;; ## License
                                ;; This program and source code can be freely redistributed, modified or reused in any way.
                                ;; Credit is not required, but attribution is always appreciated.

                                ;; .segment "OAM"
OAM             :=$0200         ;; oam: .res 256        ; sprite OAM data to be uploaded by DMA
                                ;; .segment "BSS"
nmt_update      :=$0300         ;; nmt_update: .res 256 ; nametable update entry buffer for PPU update
palette         :=$0400         ;; palette:    .res 32  ; palette buffer for PPU update




;; zero page                    ;; .segment "ZEROPAGE"
nmi_lock        :=$00           ;; nmi_lock:       .res 1 ; prevents NMI re-entry
nmi_count       :=$01           ;; nmi_count:      .res 1 ; is incremented every NMI
nmi_ready       :=$02           ;; nmi_ready:      .res 1 ; set to 1 to push a PPU frame update,
                                ;;                        ; 2 to turn rendering off next NMI
nmt_update_len  :=$03           ;; nmt_update_len: .res 1 ; number of bytes in nmt_update buffer
scroll_x        :=$04           ;; scroll_x:       .res 1 ; x scroll position
scroll_y        :=$05           ;; scroll_y:       .res 1 ; y scroll position
scroll_nmt      :=$06           ;; scroll_nmt:     .res 1 ; nametable select (0-3 = $2000,$2400,$2800,$2C00)
temp            :=$07           ;; temp:           .res 1 ; temporary variable
gamepad         :=$08           ;; gamepad:        .res 1
cursor_x        :=$09           ;; cursor_x: .res 1
cursor_y        :=$0a           ;; cursor_y: .res 1
temp_x          :=$0b           ;; temp_x:   .res 1
temp_y          :=$0c           ;; temp_y:   .res 1

nes_header                      ;; iNESヘッダ
        ?="NES",$1A             ;; "NES" Header
        ?=$02                   ;;  PRG-BANKS
        ?=$01                   ;;  CHR-BANKS
        ?=$01                   ;;  horizontal Mirror
        ?=$00                   ;;  
        ?=$00,$00,$00,$00       ;;  
        ?=$00,$00,$00,$00       ;;  

        *=$8000                 ;; .segment "STARTUP"

reset                           ;; proc Reset
        I=1                     ;;      sei
        A=0                     ;;      lda #0
        (PPU_CTRL1)=A           ;;      sta $2000
        (PPU_CTRL2)=A           ;;      sta $2001
        (APU_STATUS)=A          ;;      sta $4015 ; disable APU sound
        (APU_DMC_IRQ)=A         ;;      sta $4010 ; disable DMC IRQ
        A=$40                   ;;      lda #$40
        (APU_FRAME_CNT)=A       ;;      sta $4017 ; disable APU IRQ
        D=0                     ;;      cld       ; disable decimal mode
        X=$ff                   ;;      ldx #$ff
        S=X                     ;;      txs

                                ;;; wait for first vblank
        T=A&($2002)             ;;      bit $2002
.1                              ;;      :
        T=A&($2002)             ;;      bit $2002
        ;=PL,.1                 ;;      bpl :-

                                ;; ; clear all RAM to 0
        A=0                     ;; lda #0
        X=0                     ;; ldx #0
.2                              ;; :
        ($00+X)=A               ;;    sta $0000, X
        ($0100+X)=A             ;;    sta $0100, X
        ($0200+X)=A             ;;    sta $0200, X
        ($0300+X)=A             ;;    sta $0300, X
        ($0400+X)=A             ;;    sta $0400, X
        ($0500+X)=A             ;;    sta $0500, X
        ($0600+X)=A             ;;    sta $0600, X
        ($0700+X)=A             ;;    sta $0700, X
        X=+                     ;;    inx
        ;=NE,.2                 ;;    bne :-
                                ;; ; place all sprites offscreen at Y=255
        A=255                   ;; lda #255
        X=0                     ;; ldx #0
.3                              ;; :
        (OAM+X)=A               ;;         sta oam, X
        X=++++                  ;;         inx
                                ;;         inx
                                ;;         inx
                                ;;         inx
        ;=NE,.3                 ;;         bne :-
                                ;; ; wait for second vblank
.4                              ;; :
        T=A&($2002)             ;;         bit $2002
        ;=PL,.4                 ;;         bpl :-

                                ;; ; NES is initialized, ready to begin!
                                ;; ; enable the NMI for graphical updates, and jump to our main program
        A=%10001000             ;; lda #%10001000
        (PPU_CTRL1)=A           ;; sta $2000
        #=main                  ;; jmp main

nmi                             ;; nmi:
                                ;;     ; save registers
        [=A                     ;;     pha
        A=X                     ;;     txa
        [=A                     ;;     pha
        A=Y                     ;;     tya
        [=A                     ;;     pha
                                ;;     ; prevent NMI re-entry
        A=(nmi_lock)            ;;     lda nmi_lock
        ;=EQ,.1                 ;;     beq :+
        #=.nmi_end              ;;         jmp @nmi_end
.1                              ;;     :
        A=1                     ;;     lda #1
        (nmi_lock)=A            ;;     sta nmi_lock
                                ;;     ; increment frame counter
        (nmi_count)=+           ;;     inc nmi_count
                                ;;     ;
        A=(nmi_ready)           ;;     lda nmi_ready
        ;=NE,.2                  ;;     bne :+ ; nmi_ready == 0 not ready to update PPU
        #=.ppu_update_end       ;;         jmp @ppu_update_end
.2                              ;;     :
        T=A-2                   ;;     cmp #2 ; nmi_ready == 2 turns rendering off
        ;=NE,.3                 ;;     bne :+
        A=%00000000             ;;         lda #%00000000
        ($2001)=A               ;;         sta $2001
        X=0                     ;;         ldx #0
        (nmi_ready)=X           ;;         stx nmi_ready
        #=.ppu_update_end       ;;         jmp @ppu_update_end
.3                              ;;     :
                                ;;     ; sprite OAM DMA
        X=0                     ;;     ldx #0
        ($2003)=X               ;;     stx $2003
        A=>OAM                  ;;     lda #>oam
        ($4014)=A               ;;     sta $4014
                                ;;     ; palettes
        A=%10001000             ;;     lda #%10001000
        ($2000)=A               ;;     sta $2000 ; set horizontal nametable increment
        A=($2002)               ;;     lda $2002
        A=$3f                   ;;     lda #$3F
        ($2006)=A               ;;     sta $2006
        ($2006)=X               ;;     stx $2006 ; set PPU address to $3F00
        X=0                     ;;     ldx #0
.4                              ;;     :
        A=(palette+X)           ;;         lda palette, X
        ($2007)=A               ;;         sta $2007
        X=+                     ;;         inx
        T=X-32                  ;;         cpx #32
        ;=CC,.4                 ;;         bcc :-
                                ;;     ; nametable update
        X=0                     ;;     ldx #0
        T=X-(nmt_update_len)    ;;     cpx nmt_update_len
        ;=CS,.scroll            ;;     bcs @scroll
.nmt_update_loop                ;;     @nmt_update_loop:
        A=(nmt_update+X)        ;;         lda nmt_update, X
        ($2006)=A               ;;         sta $2006
        X=+                     ;;         inx
        A=(nmt_update+X)        ;;         lda nmt_update, X
        ($2006)=A               ;;         sta $2006
        X=+                     ;;         inx
        A=(nmt_update+X)        ;;         lda nmt_update, X
        ($2007)=A               ;;         sta $2007
        X=+                     ;;         inx
        T=X-(nmt_update_len)    ;;         cpx nmt_update_len
        ;=CC,.nmt_update_loop   ;;         bcc @nmt_update_loop
        A=0                     ;;     lda #0
        (nmt_update_len)=A      ;;     sta nmt_update_len
.scroll                         ;; @scroll:
        A=(scroll_nmt)          ;;     lda scroll_nmt
        A=A&%00000011           ;;     and #%00000011 ; keep only lowest 2 bits to prevent error
        A=A|%10001000           ;;     ora #%10001000
        ($2000)=A               ;;     sta $2000
        A=(scroll_x)            ;;     lda scroll_x
        ($2005)=A               ;;     sta $2005
        A=(scroll_y)            ;;     lda scroll_y
        ($2005)=A               ;;     sta $2005
                                ;;     ; enable rendering
        A=%00011110             ;;     lda #%00011110
        ($2001)=A               ;;     sta $2001
                                ;;     ; flag PPU update complete
        X=0                     ;;     ldx #0
        (nmi_ready)=X           ;;     stx nmi_ready
.ppu_update_end                 ;; @ppu_update_end:
                                ;;     ; if this engine had music/sound, this would be a good place to play it
                                ;;     ; unlock re-entry flag
        A=0                     ;;     lda #0
        (nmi_lock)=A            ;;     sta nmi_lock
.nmi_end                        ;; @nmi_end:
                                ;;     ; restore registers and return
        A=]                     ;;     pla
        Y=A                     ;;     tay
        A=]                     ;;     pla
        X=A                     ;;     tax
        A=]                     ;;     pla
        #=~                     ;;     rti

                                ;; .segment "CODE"
irq                             ;; irq:
        #=~                     ;;     rti

                                ;; ; ppu_update: waits until next NMI, turns rendering on (if not already),
                                ;;   uploads OAM, palette, and nametable update to PPU
ppu_update                      ;; ppu_update:
        A=1                     ;;     lda #1
        (nmi_ready)=A           ;;     sta nmi_ready
.1                              ;;     :
        A=(nmi_ready)           ;;         lda nmi_ready
        ;=NE,.1                 ;;         bne :-
        #=!                     ;;     rts
                                ;; 
                                ;; ; ppu_skip: waits until next NMI, does not update PPU
ppu_skip                        ;; ppu_skip:
        A=(nmi_count)           ;;     lda nmi_count
.1                              ;;     :
        T=A-(nmi_count)         ;;         cmp nmi_count
        ;=EQ,.1                 ;;         beq :-
        #=!                     ;;     rts
                                ;; 
                                ;; ; ppu_off: waits until next NMI, turns rendering off 
                                ;;   (now safe to write PPU directly via $2007)
ppu_off                         ;; ppu_off:
        A=2                     ;;     lda #2
        (nmi_ready)=A           ;;     sta nmi_ready
.1                              ;;     :
        A=(nmi_ready)           ;;         lda nmi_ready
        ;=NE,.1                 ;;         bne :-
        #=!                     ;;     rts

;; ppu_address_tile: use with rendering off, sets memory address to tile at X/Y, ready for a $2007 write
                                ;;;   Y =  0- 31 nametable $2000
                                ;;;   Y = 32- 63 nametable $2400
                                ;;;   Y = 64- 95 nametable $2800
                                ;;;   Y = 96-127 nametable $2C00
ppu_address_tile                ;; ppu_address_tile:
        A=($2002)               ;;     lda $2002 ; reset latch
        A=Y                     ;;     tya
        A=>                     ;;     lsr
        A=>                     ;;     lsr
        A=>                     ;;     lsr
        A=A|$20                 ;;     ora #$20 ; high bits of Y + $20
        ($2006)=A               ;;     sta $2006
        A=Y                     ;;     tya
        A=<                     ;;     asl
        A=<                     ;;     asl
        A=<                     ;;     asl
        A=<                     ;;     asl
        A=<                     ;;     asl
        (temp)=A                ;;     sta temp
        A=X                     ;;     txa
        A=A|(temp)              ;;     ora temp
        ($2006)=A               ;;     sta $2006 ; low bits of Y + X
        #=!                     ;;     rts


;; ppu_update_tile: can be used with rendering on, sets the tile at X/Y to tile A next time you call ppu_update
ppu_update_tile:
        [=A                     ;; pha ; temporarily store A on stack
        A=X                     ;; txa
        [=A                     ;; pha ; temporarily store X on stack
        X=(nmt_update_len)      ;; ldx nmt_update_len
        A=Y                     ;; tya
        A=>                     ;; lsr
        A=>                     ;; lsr
        A=>                     ;; lsr
        A=A|$20                 ;; ora #$20 ; high bits of Y + $20
        (nmt_update+X)=A        ;; sta nmt_update, X
        X=+                     ;; inx
        A=Y                     ;; tya
        A=<                     ;; asl
        A=<                     ;; asl
        A=<                     ;; asl
        A=<                     ;; asl
        A=<                     ;; asl
        (temp)=A                ;; sta temp
        A=]                     ;; pla ; recover X value (but put in A)
        A=A|(temp)              ;; ora temp
        (nmt_update+X)=A        ;; sta nmt_update, X
        X=+                     ;; inx
        A=]                     ;; pla ; recover A value (tile)
        (nmt_update+X)=A        ;; sta nmt_update, X
        X=+                     ;; inx
        (nmt_update_len)=X      ;; stx nmt_update_len
        #=!                     ;; rts

; ppu_update_byte: like ppu_update_tile, but X/Y makes the high/low bytes of the PPU address to write
;    this may be useful for updating attribute tiles
ppu_update_byte                 ;; ppu_update_byte:
        [=A                     ;;    pha ; temporarily store A on stack
        A=Y                     ;;    tya
        [=A                     ;;    pha ; temporarily store Y on stack
        Y=(nmt_update_len)      ;;    ldy nmt_update_len
        A=X                     ;;    txa
        (nmt_update+Y)=A        ;;    sta nmt_update, Y
        Y=+                     ;;    iny
        A=]                     ;;    pla ; recover Y value (but put in Y)
        (nmt_update+Y)=A        ;;    sta nmt_update, Y
        Y=+                     ;;    iny
        A=]                     ;;    pla ; recover A value (byte)
        (nmt_update+Y)=A        ;;    sta nmt_update, Y
        Y=+                     ;;    iny
        (nmt_update_len)=Y      ;;    sty nmt_update_len
        #=!                     ;;    rts

;;
;; gamepad
;;

PAD_A       :=$01
PAD_B       :=$02
PAD_SELECT  :=$04
PAD_START   :=$08
PAD_U       :=$10
PAD_D       :=$20
PAD_L       :=$40
PAD_R       :=$80

;; gamepad_poll: this reads the gamepad state into the variable labelled "gamepad"
;;   This only reads the first gamepad, and also if DPCM samples are played they can
;;   conflict with gamepad reading, which may give incorrect results.
gamepad_poll                ;; gamepad_poll:
                            ;;     ; strobe the gamepad to latch current button state
    A=1                     ;;     lda #1
    ($4016)=A               ;;     sta $4016
    A=0                     ;;     lda #0
    ($4016)=A               ;;     sta $4016
                            ;;     ; read 8 bytes from the interface at $4016
    X=8                     ;;     ldx #8
.1                          ;;     :
    [=A                     ;;         pha
    A=($4016)               ;;         lda $4016
                            ;;         ; combine low two bits and store in carry bit
    A=A&%00000011           ;;         and #%00000011
    T=A-%00000001           ;;         cmp #%00000001
    A=]                     ;;         pla
                            ;;         ; rotate carry into gamepad variable
    A=)                     ;;         ror
    X=-                     ;;         dex
    ;=NE,.1                 ;;         bne :-
    (gamepad)=A             ;;     sta gamepad
    #=!                     ;;     rts

main                        ;;    ; setup 
    X=0                     ;;    ldx #0
.1                          ;;    :
    A=(example_palette+X)   ;;        lda example_palette, X
    (palette+X)=A           ;;        sta palette, X
    X=+                     ;;        inx
    T=X-32                  ;;        cpx #32
    ;=CC,.1                 ;;        bcc :-
    !=setup_background      ;;    jsr setup_background
                            ;;    ; center the cursor
    A=128                   ;;    lda #128
    (cursor_x)=A            ;;    sta cursor_x
    A=120                   ;;    lda #120
    (cursor_y)=A            ;;    sta cursor_y
                            ;;    ; show the screen
    !=draw_cursor           ;;    jsr draw_cursor
    !=ppu_update            ;;    jsr ppu_update
                            ;;    ; main loop
.loop                       ;;@loop:
                            ;;    ; read gamepad
    !=gamepad_poll          ;;    jsr gamepad_poll
                            ;;    ; respond to gamepad state
    A=(gamepad)             ;;    lda gamepad
    A=A&PAD_START           ;;    and #PAD_START
    ;=EQ,.2                 ;;    beq :+
    !=push_start            ;;        jsr push_start
    #=.draw                 ;;        jmp @draw ; start trumps everything, don't check other buttons
.2                          ;;    :
    !=release_start         ;;    jsr release_start ; releasing start restores scroll
    A=(gamepad)             ;;    lda gamepad
    A=A&PAD_U               ;;    and #PAD_U
    ;=EQ,.3                 ;;    beq :+
    !=push_u                ;;        jsr push_u
.3                          ;;    :
    A=(gamepad)             ;;    lda gamepad
    A=A&PAD_D               ;;    and #PAD_D
    ;=EQ,.4                 ;;    beq :+
    !=push_d                ;;        jsr push_d
.4                          ;;    :
    A=(gamepad)             ;;    lda gamepad
    A=A&PAD_L               ;;    and #PAD_L
    ;=EQ,.5                 ;;    beq :+
    !=push_l                ;;        jsr push_l
.5                          ;;    :
    A=(gamepad)             ;;    lda gamepad
    A=A&PAD_R               ;;    and #PAD_R
    ;=EQ,.6                 ;;    beq :+
    !=push_r                ;;        jsr push_r
.6                          ;;    :
    A=(gamepad)             ;;    lda gamepad
    A=A&PAD_SELECT          ;;    and #PAD_SELECT
    ;=EQ,.7                 ;;    beq :+
    !=push_select           ;;        jsr push_select
.7                          ;;    :
    A=(gamepad)             ;;    lda gamepad
    A=A&PAD_B               ;;    and #PAD_B
    ;=EQ,.8                 ;;    beq :+
    !=push_b                ;;        jsr push_b
.8                          ;;    :
    A=(gamepad)             ;;    lda gamepad
    A=A&PAD_A               ;;    and #PAD_A
    ;=EQ,.9                 ;;    beq :+
    !=push_a                ;;        jsr push_a
.9                          ;;    :
.draw                       ;;@draw:
                            ;;    ; draw everything and finish the frame
    !=draw_cursor           ;;    jsr draw_cursor
    !=ppu_update            ;;    jsr ppu_update
                            ;;    ; keep doing this forever!
    #=.loop                 ;;    jmp @loop

push_u                      ;; push_u:
    (cursor_y)=-            ;;     dec cursor_y
                            ;;     ; Y wraps at 240
    A=(cursor_y)            ;;     lda cursor_y
    T=A-240                 ;;     cmp #240
    ;=CC,.1                 ;;     bcc :+
    A=239                   ;;         lda #239
    (cursor_y)=A            ;;         sta cursor_y
.1                          ;;     :
    #=!                     ;;     rts

push_d                      ;; push_d:
    (cursor_y)=+            ;;     inc cursor_y
                            ;;     ; Y wraps at 240
    A=(cursor_y)            ;;     lda cursor_y
    T=A-240                 ;;     cmp #240
    ;=CC,.1                 ;;     bcc :+
    A=0                     ;;         lda #0
    (cursor_y)=A            ;;         sta cursor_y
.1                          ;;     :
    #=!                     ;;     rts

push_l                      ;; push_l:
    (cursor_x)=-             ;;     dec cursor_x
    #=!                     ;;     rts

push_r                      ;; push_r:
    (cursor_x)=+            ;;     inc cursor_x
    #=!                     ;;     rts

push_select                 ;; push_select:
                            ;;     ; turn off rendering so we can manually update entire nametable
    !=ppu_off               ;;     jsr ppu_off
    !=setup_background      ;;     jsr setup_background
.1                          ;;     ; wait for user to release select before continuing
                            ;;     :
    !=gamepad_poll          ;;         jsr gamepad_poll
    A=(gamepad)             ;;         lda gamepad
    A=A&PAD_SELECT          ;;         and #PAD_SELECT
    ;=NE,.1                 ;;         bne :-
    #=!                     ;;     rts

push_start                  ;; push_start:
    (scroll_x)=+            ;;     inc scroll_x
    (scroll_y)=+            ;;     inc scroll_y
                            ;;     ; Y wraps at 240
    A=(scroll_y)            ;;     lda scroll_y
    T=A-240                 ;;     cmp #240
    ;=CC,.1                 ;;     bcc :+
    A=0                     ;;         lda #0
    (scroll_y)=A            ;;         sta scroll_y
.1                          ;;     :
                            ;;     ; when X rolls over, toggle the high bit of nametable select
    A=(scroll_x)            ;;     lda scroll_x
    ;=NE,.2                 ;;     bne :+
    A=(scroll_nmt)          ;;         lda scroll_nmt
    A=A^1                   ;;         eor #$01
    (scroll_nmt)=A          ;;         sta scroll_nmt
.2                          ;;     :
    #=!                     ;;     rts

release_start               ;; release_start:
    A=0                     ;;     lda #0
    (scroll_x)=A            ;;     sta scroll_x
    (scroll_y)=A            ;;     sta scroll_y
    (scroll_nmt)=A          ;;     sta scroll_nmt
    #=!                     ;;     rts

push_b                      ;; push_b:
    !=snap_cursor           ;;     jsr snap_cursor
    A=(cursor_x)            ;;     lda cursor_x
    A=>                     ;;     lsr
    A=>                     ;;     lsr
    A=>                     ;;     lsr
    X=A                     ;;     tax ; X = cursor_x / 8
    A=(cursor_y)            ;;     lda cursor_y
    A=>                     ;;     lsr
    A=>                     ;;     lsr
    A=>                     ;;     lsr
    Y=A                     ;;     tay ; Y = cursor_y / 8
    A=4                     ;;     lda #4
    !=ppu_update_tile       ;;     jsr ppu_update_tile ; puts tile 4 at X/Y
    #=!                     ;;     rts

push_a                      ;; push_a:
    !=snap_cursor           ;;     jsr snap_cursor
    A=(cursor_x)            ;;     lda cursor_x
    A=>                     ;;     lsr
    A=>                     ;;     lsr
    A=>                     ;;     lsr
    (temp_x)=A              ;;     sta temp_x ; cursor_x / 8
    A=(cursor_y)            ;;     lda cursor_y
    A=>                     ;;     lsr
    A=>                     ;;     lsr
    A=>                     ;;     lsr
    (temp_y)=A              ;;     sta temp_y ; cursor_y / 8
                            ;;     ; draw a ring of 8 tiles around the cursor
    (temp_x)=-              ;;     dec temp_x ; x-1
    (temp_y)=-              ;;     dec temp_y ; y-1
    X=(temp_x)              ;;     ldx temp_x
    Y=(temp_y)              ;;     ldy temp_y
    A=5                     ;;     lda #5
    !=ppu_update_tile       ;;     jsr ppu_update_tile
    (temp_x)=+              ;;     inc temp_x ; x
    X=(temp_x)              ;;     ldx temp_x
    Y=(temp_y)              ;;     ldy temp_y
    A=6                     ;;     lda #6
    !=ppu_update_tile       ;;     jsr ppu_update_tile
    (temp_x)=+              ;;     inc temp_x ; x+1
    X=(temp_x)              ;;     ldx temp_x
    Y=(temp_y)              ;;     ldy temp_y
    A=5                     ;;     lda #5
    !=ppu_update_tile       ;;     jsr ppu_update_tile
    (temp_x)=-              ;;     dec temp_x
    (temp_x)=-              ;;     dec temp_x ; x-1
    (temp_y)=+              ;;     inc temp_y ; y
    X=(temp_x)              ;;     ldx temp_x
    Y=(temp_y)              ;;     ldy temp_y
    A=6                     ;;     lda #6
    !=ppu_update_tile       ;;     jsr ppu_update_tile
    (temp_x)=+              ;;     inc temp_x
    (temp_x)=+              ;;     inc temp_x ; x+1
    X=(temp_x)              ;;     ldx temp_x
    Y=(temp_y)              ;;     ldy temp_y
    A=6                     ;;     lda #6
    !=ppu_update_tile       ;;     jsr ppu_update_tile
    (temp_x)=-              ;;     dec temp_x
    (temp_x)=-              ;;     dec temp_x ; x-1
    (temp_y)=+              ;;     inc temp_y ; y+1
    X=(temp_x)              ;;     ldx temp_x
    Y=(temp_y)              ;;     ldy temp_y
    A=5                     ;;     lda #5
    !=ppu_update_tile       ;;     jsr ppu_update_tile
    (temp_x)=+              ;;     inc temp_x ; x
    X=(temp_x)              ;;     ldx temp_x
    Y=(temp_y)              ;;     ldy temp_y
    A=6                     ;;     lda #6
    !=ppu_update_tile       ;;     jsr ppu_update_tile
    (temp_x)=+              ;;     inc temp_x ; x+1
    X=(temp_x)              ;;     ldx temp_x
    Y=(temp_y)              ;;     ldy temp_y
    A=5                     ;;     lda #5
    !=ppu_update_tile       ;;     jsr ppu_update_tile
    #=!                     ;;     rts

                            ;; ; snap_cursor: snap cursor to nearest tile
snap_cursor                 ;; snap_cursor:
    A=(cursor_x)            ;;     lda cursor_x
                            ;;     clc
    A=A+4                   ;;     adc #4
    A=A&$f8                 ;;     and #$F8
    (cursor_x)=A            ;;     sta cursor_x
    A=(cursor_y)            ;;     lda cursor_y
                            ;;     clc
    A=A+4                   ;;     adc #4
    A=A&$f8                 ;;     and #$F8
    (cursor_y)=A            ;;     sta cursor_y
                            ;;     ; Y wraps at 240
    T=A-240                 ;;     cmp #240
    ;=CC,.1                 ;;     bcc :+
    A=0                     ;;         lda #0
    (cursor_y)=A            ;;         sta cursor_y
.1                          ;;     :
    #=!                     ;;     rts

draw_cursor                 ;; draw_cursor:
                            ;;     ; four sprites centred around the currently selected tile
                            ;;     ; y position (note, needs to be one line higher than sprite's appearance)
    A=(cursor_y)            ;;     lda cursor_y
                            ;;     sec
    A=A-5                   ;;     sbc #5 ; Y-5
    (OAM)=A                 ;;     sta oam+(0*4)+0
    (OAM+4)=A               ;;     sta oam+(1*4)+0
    A=(cursor_y)            ;;     lda cursor_y
                            ;;     clc
    A=A+3                   ;;     adc #3 ; Y+3
    (OAM+8)=A               ;;     sta oam+(2*4)+0
    (OAM+12)=A              ;;     sta oam+(3*4)+0
                            ;;     ; tile
    A=1                     ;;     lda #1
    (OAM+1)=A               ;;     sta oam+(0*4)+1
    (OAM+4+1)=A             ;;     sta oam+(1*4)+1
    (OAM+8+1)=A             ;;     sta oam+(2*4)+1
    (OAM+12+1)=A            ;;     sta oam+(3*4)+1
                            ;;     ; attributes
    A=%00000000             ;;     lda #%00000000 ; no flip
    (OAM+2)=A               ;;     sta oam+(0*4)+2
    A=%01000000             ;;     lda #%01000000 ; horizontal flip
    (OAM+4+2)=A             ;;     sta oam+(1*4)+2
    A=%10000000             ;;     lda #%10000000 ; vertical flip
    (OAM+8+2)=A             ;;     sta oam+(2*4)+2
    A=%11000000             ;;     lda #%11000000 ; both flip
    (OAM+12+2)=A            ;;     sta oam+(3*4)+2
                            ;;     ; x position
    A=(cursor_x)            ;;     lda cursor_x
                            ;;     sec
    A=A-4                   ;;     sbc #4 ; X-4
    (OAM+3)=A               ;;     sta oam+(0*4)+3
    (OAM+8+3)=A             ;;     sta oam+(2*4)+3
    A=(cursor_x)            ;;     lda cursor_x
                            ;;     clc
    A=A+4                   ;;     adc #4 ; X+4
    (OAM+4+3)=A             ;;     sta oam+(1*4)+3
    (OAM+12+3)=A            ;;     sta oam+(3*4)+3
    #=!                     ;;     rts

setup_background            ;; setup_background:
                            ;;     ; first nametable, start by clearing to empty
    A=($2002)               ;;     lda $2002 ; reset latch
    A=$20                   ;;     lda #$20
    ($2006)=A               ;;     sta $2006
    A=$00                   ;;     lda #$00
    ($2006)=A               ;;     sta $2006
                            ;;     ; empty nametable
    A=0                     ;;     lda #0
    Y=30                    ;;     ldy #30 ; 30 rows
.1                          ;;     :
    X=32                    ;;         ldx #32 ; 32 columns
.2                          ;;         :
    ($2007)=A               ;;             sta $2007
    X=-                     ;;             dex
    ;=NE,.2                 ;;             bne :-
    Y=-                     ;;         dey
    ;=NE,.1                 ;;         bne :--
                            ;;     ; set all attributes to 0
    X=64                    ;;     ldx #64 ; 64 bytes
.3                          ;;     :
    ($2007)=A               ;;         sta $2007
    X=-                     ;;         dex
    ;=NE,.3                 ;;         bne :-
                            ;;     ; fill in an area in the middle with 1/2 checkerboard
    A=1                     ;;     lda #1
    Y=8                     ;;     ldy #8 ; start at row 8
.4                          ;;     :
    [=A                     ;;         pha ; temporarily store A, it will be clobbered by ppu_address_tile routine
    X=8                     ;;         ldx #8 ; start at column 8
    !=ppu_address_tile      ;;         jsr ppu_address_tile
    A=]                     ;;         pla ; recover A
                            ;;         ; write a line of checkerboard
    X=8                     ;;         ldx #8
.5                          ;;         :
    ($2007)=A               ;;             sta $2007
    A=A^3                   ;;             eor #$3
    X=+                     ;;             inx
    T=X-24                  ;;             cpx #(32-8)
    ;=CC,.5                 ;;             bcc :-
    A=A^3                   ;;         eor #$3
    Y=+                     ;;         iny
    T=Y-22                  ;;         cpy #(30-8)
    ;=CC,.4                 ;;         bcc :--
                            ;;     ; second nametable, fill with simple pattern
    A=$24                   ;;     lda #$24
    ($2006)=A               ;;     sta $2006
    A=$00                   ;;     lda #$00
    ($2006)=A               ;;     sta $2006
    A=$00                   ;;     lda #$00
    Y=30                    ;;     ldy #30
.6                          ;;     :
    X=32                    ;;         ldx #32
.7                          ;;         :
    ($2007)=A               ;;             sta $2007
                            ;;             clc
    A=A+1                   ;;             adc #1
    A=A&3                   ;;             and #3
    X=-                     ;;             dex
    ;=NE,.7                 ;;             bne :-
                            ;;         clc
    A=A+1                   ;;         adc #1
    A=A&3                   ;;         and #3
    Y=-                     ;;         dey
    ;=NE,.6                 ;;         bne :--
                            ;;     ; 4 stripes of attribute
    A=0                     ;;     lda #0
    Y=4                     ;;     ldy #4
.8                          ;;     :
    X=16                    ;;         ldx #16
.9                          ;;         :
    ($2007)=A               ;;             sta $2007
    X=-                     ;;             dex
    ;=NE,.9                 ;;             bne :-
                            ;;         clc
    A=A+%01010101           ;;         adc #%01010101
    Y=-                     ;;         dey
    ;=NE,.8                 ;;         bne :--
    #=!                     ;;     rts


;; .segment "RODATA"
example_palette
        ?=$0F,$15,$26,$37   ;; bg0 purple/pink
        ?=$0F,$09,$19,$29   ;; bg1 green
        ?=$0F,$01,$11,$21   ;; bg2 blue
        ?=$0F,$00,$10,$30   ;; bg3 greyscale
        ?=$0F,$18,$28,$38   ;; sp0 yellow
        ?=$0F,$14,$24,$34   ;; sp1 purple
        ?=$0F,$1B,$2B,$3B   ;; sp2 teal
        ?=$0F,$12,$22,$32   ;; sp3 marine

        $=$00,$fffa-*       ;;.segment "VECINFO"                       
        ?=nmi               ;;        .word        $0000
        ?=reset             ;;        .word        Reset
        ?=irq               ;;        .word        $0000
                            ;;
        *=$0000             ;;.segment "CHARS"
        &="background.chr"  ;;        .incbin "background.chr"
        &="sprite.chr"      ;;        .incbin "sprite.chr"